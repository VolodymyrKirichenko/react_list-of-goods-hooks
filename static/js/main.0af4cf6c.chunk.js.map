{"version":3,"sources":["app.typedefs.ts","GoodList.tsx","goodsFromServer.ts","App.tsx","helpers/helpers.ts","index.tsx"],"names":["SortType","GoodList","props","rowGoods","map","good","className","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goods","visibleGoods","sort","a1","a2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","type","cn","onClick","currentState","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,mECMCC,EAAsB,SAACC,GAClC,IAAQC,EAAaD,EAAbC,SAER,OACE,6BACGA,EAASC,KAAI,SAAAC,GACZ,OACE,oBACE,UAAQ,OAERC,UAAU,qCAHZ,SAKGD,GAHIA,U,SDfLL,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KEAL,IAAMO,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,U,OCDWC,EAAgB,WAC3B,MAAgCC,mBAAmBT,EAASU,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAWMX,ECpByB,SAC/BY,EAD+B,GAG3B,IADFJ,EACC,EADDA,SAAUE,EACT,EADSA,WAENG,EAAY,YAAOD,GAazB,OAXAC,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQR,GACN,KAAKX,EAASoB,SACZ,OAAOF,EAAGG,cAAcF,GAC1B,KAAKnB,EAASsB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OACxB,QACE,OAAO,MAINV,EACHG,EAAaQ,UACbR,EDCaS,CAAkBlB,EAAiB,CAClDI,WACAE,eAGF,OACE,sBAAKP,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEoB,KAAK,SACLpB,UACEqB,IAAG,iBACD,CAAE,WAAYhB,IAAaX,EAASoB,WAExCQ,QAAS,kBAAMhB,EAAYZ,EAASoB,WANtC,iCAWA,wBACEM,KAAK,SACLpB,UAAWqB,IAAG,oBACZ,CAAE,WAAYhB,IAAaX,EAASsB,SACtCM,QAAS,kBAAMhB,EAAYZ,EAASsB,SAJtC,4BASA,wBACEI,KAAK,SACLpB,UAAWqB,IAAG,oBACZ,CAAE,YAAad,IACjBe,QAzCe,WACrBd,GAAc,SAACe,GAAD,OAAmBA,MAoC7B,sBASElB,GAAYE,IACZ,wBACEa,KAAK,SACLpB,UAAU,4BACVsB,QA9CW,WACnBhB,EAAYZ,EAASU,MACrBI,GAAc,IAyCR,sBAUJ,cAAC,EAAD,CAAUX,SAAUA,QEnE1B2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0af4cf6c.chunk.js","sourcesContent":["export enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport interface ReorderOptions {\n  sortType: SortType,\n  isReversed: boolean,\n}\n","import { FC } from 'react';\n\ninterface Props {\n  rowGoods: string[];\n}\n\nexport const GoodList: FC<Props> = (props) => {\n  const { rowGoods } = props;\n\n  return (\n    <ul>\n      {rowGoods.map(good => {\n        return (\n          <li\n            data-cy=\"Good\"\n            key={good}\n            className=\"box column is-info is-rounded mb-3\"\n          >\n            {good}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","export const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { GoodList } from './GoodList';\nimport { SortType } from './app.typedefs';\nimport { goodsFromServer } from './goodsFromServer';\nimport { getReorderedGoods } from './helpers/helpers';\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const reverseHandler = () => {\n    setIsReversed((currentState) => !currentState);\n  };\n\n  const resetHandler = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const rowGoods = getReorderedGoods(goodsFromServer, {\n    sortType,\n    isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button is-info',\n              { 'is-light': sortType !== SortType.ALPHABET })\n          }\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortType !== SortType.LENGTH })}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !isReversed })}\n          onClick={reverseHandler}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetHandler}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList rowGoods={rowGoods} />\n    </div>\n  );\n};\n","import { ReorderOptions, SortType } from '../app.typedefs';\n\nexport const getReorderedGoods = (\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) => {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a1, a2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a1.localeCompare(a2);\n      case SortType.LENGTH:\n        return a1.length - a2.length;\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}